# Copyright 2015-2019 Rene Rivera.
# Copyright 2019 Mateusz Loskot <mateusz at loskot dot net>
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at http://boost.org/LICENSE_1_0.txt)

#
# Generic Azure Pipelines build script for boostorg repositories
# See: https://github.com/boostorg/boost-ci/
#
# Instructions for customizing this script for your library:
#
# 1. Customize the compilers and language levels you want.
# 2. If you have more than include/, src/, test/, example/, examples/,
#    benchmark/ or tools/ directories, set the environment variable DEPINST.
#    For example if your build uses code in "bench/" and "fog/" directories:
#      - DEPINST: --include bench --include fog
# 3. Enable pull request builds in your boostorg/<library> account.
#
# That's it - the script will do everything else for you.

trigger:
  branches:
    include:
    - develop
    - master
    - bugfix/*
    - feature/*
    - fix/*
    - pr/*

pr:
  branches:
    include:
    - develop

variables:
  - name: B2_VARIANT
    value: release,debug
  - name: B2_LINK
    value: shared,static

stages:

- stage: Test
  jobs:

  - job: 'Linux'
    pool:
      vmImage: 'ubuntu-16.04'
    strategy:
      matrix:
        GCC_8:
          B2_TOOLSET: gcc
          B2_CXXSTD: 03,11,14,17,2a
          CXX: g++-8
          PACKAGES: g++-8
        Clang_8:
          B2_TOOLSET: clang
          B2_CXXSTD: 03,11,14,17,2a
          CXX: clang++-8
          PACKAGES: clang-8
          LLVM_REPO: llvm-toolchain-xenial-8
    steps:
    - bash: |
        set -e

        git clone --branch flags https://github.com/Flamefire/boost-ci.git boost-ci-cloned
        cp -prf boost-ci-cloned/ci .
        rm -rf boost-ci-cloned
        source ci/azure-pipelines/install.sh
      displayName: 'Install'
    - bash: |
        set -e
        echo "SELF=$SELF"
        echo "BOOST_ROOT=$BOOST_ROOT"

        cd $BOOST_ROOT/libs/$SELF
        ci/azure-pipelines/build.sh --debug-configuration
      displayName: 'Build'

  - job: 'Windows'
    strategy:
      matrix:
        VS_2019_CXX2a_Strict:
          B2_TOOLSET: msvc-14.2
          B2_CXXSTD: latest # 2a
          B2_CXXFLAGS: -permissive-
          B2_ADDRESS_MODEL: 64
          VM_IMAGE: 'windows-2019'
        VS_2017_CXX2a_Strict:
          B2_TOOLSET: msvc-14.1
          B2_CXXSTD: latest # 2a
          B2_CXXFLAGS: -permissive-
          B2_ADDRESS_MODEL: 64
          VM_IMAGE: 'vs2017-win2016'
        VS_2017_CXX17:
          B2_TOOLSET: msvc-14.1
          B2_CXXSTD: 17
          B2_ADDRESS_MODEL: 64,32
          VM_IMAGE: 'vs2017-win2016'
        VS_2017_CXX14:
          B2_TOOLSET: msvc-14.1
          #B2_CXXSTD: 14 # default
          B2_ADDRESS_MODEL: 64,32
          VM_IMAGE: 'vs2017-win2016'

    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - script: |
        git clone --branch flags https://github.com/Flamefire/boost-ci.git boost-ci-cloned
        xcopy /s /e /q /i /y boost-ci-cloned\ci .\ci
        rmdir /s /q boost-ci-cloned
        cmd /k ci\azure-pipelines\install.bat
      displayName: 'Install'
    - script: |
        %BOOST_ROOT%\libs\%SELF%\ci\build.bat
      displayName: 'Build'

  - job: 'macOS'
    pool:
      vmImage: 'macOS-10.14'
    strategy:
      matrix:
        Xcode_11_3_1:
          B2_TOOLSET: clang
          B2_CXXSTD: 03,11,14,17,2a
          XCODE_APP: /Applications/Xcode_11.3.1.app
          B2_LINK: static
          B2_JOBS: 3 # Workaround for https://github.com/boostorg/boost-ci/issues/50
    steps:
    - bash: |
        set -e

        git clone --branch flags https://github.com/Flamefire/boost-ci.git boost-ci-cloned
        cp -prf boost-ci-cloned/ci .
        rm -rf boost-ci-cloned
        source ci/azure-pipelines/install.sh
      displayName: Install
    - bash: |
        set -e
        echo "SELF=$SELF"
        echo "BOOST_ROOT=$BOOST_ROOT"

        cd $BOOST_ROOT/libs/$SELF
        ci/azure-pipelines/build.sh --debug-configuration
      displayName: 'Build'
