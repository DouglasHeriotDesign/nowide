# Copyright 2015-2019 Rene Rivera.
# Copyright 2019 Mateusz Loskot <mateusz at loskot dot net>
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at http://boost.org/LICENSE_1_0.txt)

#
# Generic Azure Pipelines build script for boostorg repositories
# See: https://github.com/boostorg/boost-ci/
#
# Instructions for customizing this script for your library:
#
# 1. Customize the compilers and language levels you want.
# 2. If you have more than include/, src/, test/, example/, examples/,
#    benchmark/ or tools/ directories, set the environment variable DEPINST.
#    For example if your build uses code in "bench/" and "fog/" directories:
#      - DEPINST: --include bench --include fog
# 3. Enable pull request builds in your boostorg/<library> account.
#
# That's it - the script will do everything else for you.

trigger:
  branches:
    include:
    - develop
    - master
    - bugfix/*
    - feature/*
    - fix/*
    - pr/*

pr:
  branches:
    include:
    - develop

variables:
  - name: B2_VARIANT
    value: variant=release,debug
  - name: B2_LINK
    value: link=shared,static

stages:

- stage: Test
  jobs:

  - job: 'Linux'
    pool:
      vmImage: 'ubuntu-16.04'
    strategy:
      matrix:
        GCC_8:
          B2_TOOLSET: gcc
          B2_CXXSTD: 03,11,14,17,2a
          CXX: g++-8
          PACKAGES: g++-8
        Clang_8:
          B2_TOOLSET: clang
          B2_CXXSTD: 03,11,14,17,2a
          CXX: clang++-8
          PACKAGES: clang-8
          LLVM_REPO: llvm-toolchain-xenial-8
    steps:
    - bash: |
        set -e
        uname -a
        sudo -E apt-add-repository -y "ppa:ubuntu-toolchain-r/test"
        if test -n "${LLVM_REPO}" ; then
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo -E apt-add-repository "deb http://apt.llvm.org/xenial/ ${LLVM_REPO} main"
        fi
        sudo -E apt-get update
        sudo -E apt-get -yq --no-install-suggests --no-install-recommends install ${PACKAGES}

        git clone --branch master https://github.com/boostorg/boost-ci.git boost-ci-cloned
        cp -prf boost-ci-cloned/ci .
        rm -rf boost-ci-cloned
        source ci/azure-pipelines/install.sh

        # AzP requires to run special task in order to export
        # SELF and BOOST_ROOT as job-scoped variable from a script.
        # NOTE: Disable set -x is necessary, see the troubleshooting guide
        # on "Variables having ' (single quote) appended":
        # https://docs.microsoft.com/en-us/azure/devops/pipelines/troubleshooting
        set +x
        echo "##vso[task.setvariable variable=SELF]"$SELF
        echo "##vso[task.setvariable variable=BOOST_ROOT]"$BOOST_ROOT
        set -x
      displayName: 'Install'
    - bash: |
        cd $BOOST_ROOT/libs/$SELF
        ci/azure-pipelines/build.sh
      displayName: 'Build'

  - job: 'Windows'
    strategy:
      matrix:
        VS_2019-CXX2a_Strict:
          B2_TOOLSET: msvc-14.2
          B2_CXXSTD: latest # 2a
          B2_CXXFLAGS: cxxflags=-permissive-
          B2_ADDRESS_MODEL: address-model=64
          VM_IMAGE: 'windows-2019'
        VS_2017_CXX2a_Strict:
          B2_TOOLSET: msvc-14.1
          B2_CXXSTD: latest # 2a
          B2_CXXFLAGS: cxxflags=-permissive-
          B2_ADDRESS_MODEL: address-model=64
          VM_IMAGE: 'vs2017-win2016'
        VS_2017_CXX17:
          B2_TOOLSET: msvc-14.1
          B2_CXXSTD: 17
          B2_ADDRESS_MODEL: address-model=64,32
          VM_IMAGE: 'vs2017-win2016'
        VS_2017_CXX14:
          B2_TOOLSET: msvc-14.1
          #B2_CXXSTD: 14 # default
          B2_ADDRESS_MODEL: address-model=64,32
          VM_IMAGE: 'vs2017-win2016'

    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - script: |
        set SELF=%BUILD_REPOSITORY_NAME:-=_%
        for /f "tokens=2 delims=/" %%a in ("%SELF%") do set SELF=%%a
        set BOOST_ROOT=%BUILD_SOURCESDIRECTORY%\boost-root

        git clone --branch master https://github.com/boostorg/boost-ci.git boost-ci-cloned
        xcopy /s /e /q /i /y boost-ci-cloned\ci .\ci
        rmdir /s /q boost-ci-cloned
        cmd /k ci\azure-pipelines\install.bat

        echo ##vso[task.setvariable variable=SELF]%SELF%
        echo ##vso[task.setvariable variable=BOOST_ROOT]%BOOST_ROOT%
      displayName: 'Install'
    - script: |
        PATH=%ADDPATH%%PATH%
        REM The definition of B2_TOOLCXX omits B2_CXXSTD= if it was not defined above
        IF NOT DEFINED B2_CXXSTD (SET B2_TOOLCXX=toolset=%B2_TOOLSET%) ELSE (SET B2_TOOLCXX=toolset=%B2_TOOLSET% cxxstd=%B2_CXXSTD%)
        cd %BOOST_ROOT%
        ECHO b2 libs/%SELF:\=/% %B2_TOOLCXX% %B2_CXXFLAGS% %B2_DEFINES% %B2_THREADING% %B2_ADDRESS_MODEL% %B2_LINK% %B2_THREADING% %B2_VARIANT% -j3
        b2 libs/%SELF:\=/% %B2_TOOLCXX% %B2_CXXFLAGS% %B2_DEFINES% %B2_THREADING% %B2_ADDRESS_MODEL% %B2_LINK% %B2_THREADING% %B2_VARIANT% -j3
      displayName: 'Build'

  - job: 'macOS'
    pool:
      vmImage: 'macOS-10.14'
    strategy:
      matrix:
        Xcode_11_3_1:
          B2_TOOLSET: clang
          B2_CXXSTD: 03,11,14,17,2a
          XCODE_APP: /Applications/Xcode_11.3.1.app
          B2_LINK: link=static
          B2_JOBS: 3 # Workaround for https://github.com/boostorg/boost-ci/issues/50
    steps:
    - bash: |
        set -e
        sudo xcode-select -switch ${XCODE_APP}
        which clang++

        git clone --branch master https://github.com/boostorg/boost-ci.git boost-ci-cloned
        cp -prf boost-ci-cloned/ci .
        rm -rf boost-ci-cloned
        source ci/azure-pipelines/install.sh

        # AzP requires to run special task in order to export
        # SELF and BOOST_ROOT as job-scoped variable from a script.
        # NOTE: Disable set -x is necessary, see the troubleshooting guide
        # on "Variables having ' (single quote) appended":
        # https://docs.microsoft.com/en-us/azure/devops/pipelines/troubleshooting
        set +x
        echo "##vso[task.setvariable variable=SELF]"$SELF
        echo "##vso[task.setvariable variable=BOOST_ROOT]"$BOOST_ROOT
        set -x
      displayName: Install
    - bash: |
        cd $BOOST_ROOT/libs/$SELF
        ci/azure-pipelines/build.sh
      displayName: 'Build'
